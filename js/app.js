// Generated by CoffeeScript 1.7.1
(function() {
  var Solver;

  Solver = (function() {
    var allIndices, dimension, indexCollections, symbols;

    dimension = 9;

    symbols = [1, 2, 3, 4, 5, 6, 7, 8, 9];

    indexCollections = [];

    allIndices = [];

    function Solver() {
      var box, boxCellOffsets, boxStartOffsets, cellOffset, x, y, _i, _j, _k, _l, _m;
      for (x = _i = 0; 0 <= dimension ? _i < dimension : _i > dimension; x = 0 <= dimension ? ++_i : --_i) {
        for (y = _j = 0; 0 <= dimension ? _j < dimension : _j > dimension; y = 0 <= dimension ? ++_j : --_j) {
          allIndices.push(this.getCellIndex(x, y));
        }
      }
      for (y = _k = 0; 0 <= dimension ? _k < dimension : _k > dimension; y = 0 <= dimension ? ++_k : --_k) {
        indexCollections.push((function() {
          var _l, _results;
          _results = [];
          for (x = _l = 0; 0 <= dimension ? _l < dimension : _l > dimension; x = 0 <= dimension ? ++_l : --_l) {
            _results.push(this.getCellIndex(x, y));
          }
          return _results;
        }).call(this));
      }
      for (x = _l = 0; 0 <= dimension ? _l < dimension : _l > dimension; x = 0 <= dimension ? ++_l : --_l) {
        indexCollections.push((function() {
          var _m, _results;
          _results = [];
          for (y = _m = 0; 0 <= dimension ? _m < dimension : _m > dimension; y = 0 <= dimension ? ++_m : --_m) {
            _results.push(this.getCellIndex(x, y));
          }
          return _results;
        }).call(this));
      }
      boxCellOffsets = [0, 1, 2, 9, 10, 11, 18, 19, 20];
      boxStartOffsets = [0, 3, 6, 27, 30, 33, 54, 57, 60];
      for (box = _m = 0; 0 <= dimension ? _m < dimension : _m > dimension; box = 0 <= dimension ? ++_m : --_m) {
        indexCollections.push((function() {
          var _len, _n, _results;
          _results = [];
          for (_n = 0, _len = boxCellOffsets.length; _n < _len; _n++) {
            cellOffset = boxCellOffsets[_n];
            _results.push(boxStartOffsets[box] + cellOffset);
          }
          return _results;
        })());
      }
    }

    Solver.prototype.solve = function(grid) {
      var emptyCellIndices, indexToSolve, newGrid, solvedNewGrid, symbol, _i, _len;
      if (!this.isValid(grid)) {
        return null;
      }
      if (this.isFilled(grid)) {
        return grid;
      }
      emptyCellIndices = this.getEmptyCellIndices(grid);
      indexToSolve = emptyCellIndices[0];
      for (_i = 0, _len = symbols.length; _i < _len; _i++) {
        symbol = symbols[_i];
        newGrid = grid.slice();
        newGrid[indexToSolve] = symbol;
        solvedNewGrid = this.solve(newGrid);
        if (solvedNewGrid != null) {
          return solvedNewGrid;
        }
      }
      return null;
    };

    Solver.prototype.isValid = function(grid) {
      var indices, indicesWithSymbol, symbol, _i, _j, _len, _len1;
      for (_i = 0, _len = symbols.length; _i < _len; _i++) {
        symbol = symbols[_i];
        for (_j = 0, _len1 = indexCollections.length; _j < _len1; _j++) {
          indices = indexCollections[_j];
          indicesWithSymbol = this.getIndicesMatchingSymbol(grid, indices, symbol);
          if (indicesWithSymbol.length > 1) {
            return false;
          }
        }
      }
      return true;
    };

    Solver.prototype.isFilled = function(grid) {
      var emptyCellIndices;
      emptyCellIndices = this.getEmptyCellIndices(grid);
      return emptyCellIndices.length === 0;
    };

    Solver.prototype.getEmptyCellIndices = function(grid) {
      return this.getIndicesMatchingSymbol(grid, allIndices, null);
    };

    Solver.prototype.getIndicesMatchingSymbol = function(grid, indices, symbol) {
      var index;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = indices.length; _i < _len; _i++) {
          index = indices[_i];
          if (grid[index] === symbol) {
            _results.push(index);
          }
        }
        return _results;
      })();
    };

    Solver.prototype.getCellIndex = function(x, y) {
      return dimension * y + x;
    };

    return Solver;

  })();

  this.Solver = Solver;

}).call(this);

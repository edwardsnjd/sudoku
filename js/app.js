// Generated by CoffeeScript 1.7.1
(function() {
  var Grid, OnlyAvailableValueStrategy, OnlyPositionInCollectionStrategy, PrioritisedStrategy, RandomMoveStrategy, Solver;

  Grid = (function() {
    function Grid(data) {
      var boxX, boxY, cellsInThisBox, startX, startY, x, y, _i, _j, _k, _l, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.data = data;
      this.symbols = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      this._order = 3;
      this._dimension = this._order * this._order;
      this._allCells = [];
      for (x = _i = 0, _ref = this._dimension; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this._dimension; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this._allCells.push({
            x: x,
            y: y
          });
        }
      }
      this.collections = [];
      for (y = _k = 0, _ref2 = this._dimension; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; y = 0 <= _ref2 ? ++_k : --_k) {
        this.collections.push((function() {
          var _l, _ref3, _results;
          _results = [];
          for (x = _l = 0, _ref3 = this._dimension; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; x = 0 <= _ref3 ? ++_l : --_l) {
            _results.push({
              x: x,
              y: y
            });
          }
          return _results;
        }).call(this));
      }
      for (x = _l = 0, _ref3 = this._dimension; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; x = 0 <= _ref3 ? ++_l : --_l) {
        this.collections.push((function() {
          var _m, _ref4, _results;
          _results = [];
          for (y = _m = 0, _ref4 = this._dimension; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; y = 0 <= _ref4 ? ++_m : --_m) {
            _results.push({
              x: x,
              y: y
            });
          }
          return _results;
        }).call(this));
      }
      for (boxX = _m = 0, _ref4 = this._order; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; boxX = 0 <= _ref4 ? ++_m : --_m) {
        for (boxY = _n = 0, _ref5 = this._order; 0 <= _ref5 ? _n < _ref5 : _n > _ref5; boxY = 0 <= _ref5 ? ++_n : --_n) {
          cellsInThisBox = [];
          startX = boxX * this._order;
          startY = boxY * this._order;
          for (x = _o = startX, _ref6 = startX + this._order; startX <= _ref6 ? _o < _ref6 : _o > _ref6; x = startX <= _ref6 ? ++_o : --_o) {
            for (y = _p = startY, _ref7 = startY + this._order; startY <= _ref7 ? _p < _ref7 : _p > _ref7; y = startY <= _ref7 ? ++_p : --_p) {
              cellsInThisBox.push({
                x: x,
                y: y
              });
            }
          }
          this.collections.push(cellsInThisBox);
        }
      }
    }

    Grid.prototype.isValid = function() {
      var cells, cellsWithSymbol, symbol, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.symbols;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        symbol = _ref[_i];
        _ref1 = this.collections;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cells = _ref1[_j];
          cellsWithSymbol = this._getCellsMatchingSymbol(cells, symbol);
          if (cellsWithSymbol.length > 1) {
            return false;
          }
        }
      }
      return true;
    };

    Grid.prototype.isFilled = function() {
      return this.getEmptyCells().length === 0;
    };

    Grid.prototype.getEmptyCells = function() {
      return this._getCellsMatchingSymbol(this._allCells, null);
    };

    Grid.prototype.getCellValue = function(cell) {
      var index;
      index = this._getCellIndex(cell);
      return this.data[index];
    };

    Grid.prototype.setCellValue = function(cell, value) {
      var index;
      index = this._getCellIndex(cell);
      return this.data[index] = value;
    };

    Grid.prototype._getCellIndex = function(cell) {
      return this._dimension * cell.y + cell.x;
    };

    Grid.prototype._getCellsMatchingSymbol = function(cells, symbol) {
      var cell;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cells.length; _i < _len; _i++) {
          cell = cells[_i];
          if (this.getCellValue(cell) === symbol) {
            _results.push(cell);
          }
        }
        return _results;
      }).call(this);
    };

    Grid.prototype.clone = function() {
      return new Grid(this.data.slice());
    };

    Grid.prototype.getValidValues = function(cell) {
      var cells, contains, containsCell, getSymbolsUsed, relevantCollections, symbol, symbolsUsedByRelevantCollection, unusedSymbols, usedSymbols;
      if (this.data[this._getCellIndex(cell)] != null) {
        return [];
      }
      contains = function(list, item) {
        return list.indexOf(item) >= 0;
      };
      containsCell = function(cells, cell) {
        var testCell, _i, _len;
        for (_i = 0, _len = cells.length; _i < _len; _i++) {
          testCell = cells[_i];
          if (testCell.x === cell.x && testCell.y === cell.y) {
            return true;
          }
        }
        return false;
      };
      getSymbolsUsed = (function(_this) {
        return function(cells) {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = cells.length; _i < _len; _i++) {
            cell = cells[_i];
            if (_this.getCellValue(cell) != null) {
              _results.push(_this.getCellValue(cell));
            }
          }
          return _results;
        };
      })(this);
      relevantCollections = (function() {
        var _i, _len, _ref, _results;
        _ref = this.collections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cells = _ref[_i];
          if (containsCell(cells, cell)) {
            _results.push(cells);
          }
        }
        return _results;
      }).call(this);
      symbolsUsedByRelevantCollection = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = relevantCollections.length; _i < _len; _i++) {
          cells = relevantCollections[_i];
          _results.push(getSymbolsUsed(cells));
        }
        return _results;
      })();
      usedSymbols = [].concat.apply([], symbolsUsedByRelevantCollection);
      unusedSymbols = (function() {
        var _i, _len, _ref, _results;
        _ref = this.symbols;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          symbol = _ref[_i];
          if (!contains(usedSymbols, symbol)) {
            _results.push(symbol);
          }
        }
        return _results;
      }).call(this);
      return unusedSymbols;
    };

    return Grid;

  })();

  this.Grid = Grid;

  OnlyAvailableValueStrategy = (function() {
    function OnlyAvailableValueStrategy() {}

    OnlyAvailableValueStrategy.prototype.getCandidateMoves = function(grid) {
      var emptyCell, moves, validValues, _i, _len, _ref;
      moves = [];
      _ref = grid.getEmptyCells();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        emptyCell = _ref[_i];
        validValues = grid.getValidValues(emptyCell);
        if (validValues.length === 1) {
          moves.push({
            cell: emptyCell,
            symbol: validValues[0],
            strategy: this.constructor.name
          });
        }
      }
      return moves;
    };

    return OnlyAvailableValueStrategy;

  })();

  OnlyPositionInCollectionStrategy = (function() {
    function OnlyPositionInCollectionStrategy() {}

    OnlyPositionInCollectionStrategy.prototype.getCandidateMoves = function(grid) {
      var cell, cells, moves, positions, symbol, symbolPositions, validValue, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      moves = [];
      _ref = grid.collections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cells = _ref[_i];
        positions = {};
        _ref1 = grid.symbols;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          symbol = _ref1[_j];
          positions[symbol] = [];
        }
        for (_k = 0, _len2 = cells.length; _k < _len2; _k++) {
          cell = cells[_k];
          _ref2 = grid.getValidValues(cell);
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            validValue = _ref2[_l];
            positions[validValue].push(cell);
          }
        }
        _ref3 = grid.symbols;
        for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
          symbol = _ref3[_m];
          symbolPositions = positions[symbol];
          if (symbolPositions.length === 1) {
            moves.push({
              cell: symbolPositions[0],
              symbol: symbol,
              strategy: this.constructor.name
            });
          }
        }
      }
      return moves;
    };

    return OnlyPositionInCollectionStrategy;

  })();

  PrioritisedStrategy = (function() {
    function PrioritisedStrategy(strategies) {
      this.strategies = strategies;
    }

    PrioritisedStrategy.prototype.getCandidateMoves = function(grid) {
      var moves, strategy, _i, _len, _ref;
      _ref = this.strategies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        strategy = _ref[_i];
        moves = strategy.getCandidateMoves(grid);
        if ((moves != null) && moves.length > 0) {
          return moves;
        }
      }
      return [];
    };

    return PrioritisedStrategy;

  })();

  RandomMoveStrategy = (function() {
    function RandomMoveStrategy() {}

    RandomMoveStrategy.prototype.getCandidateMoves = function(grid) {
      var cellToSet, emptyCells, symbol, validValues;
      emptyCells = grid.getEmptyCells();
      cellToSet = emptyCells[0];
      validValues = grid.getValidValues(cellToSet);
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = validValues.length; _i < _len; _i++) {
          symbol = validValues[_i];
          _results.push({
            cell: cellToSet,
            symbol: symbol,
            strategy: this.constructor.name
          });
        }
        return _results;
      }).call(this);
    };

    return RandomMoveStrategy;

  })();

  Solver = (function() {
    function Solver() {
      var oaps, oavs, rms;
      oavs = new OnlyAvailableValueStrategy();
      oaps = new OnlyPositionInCollectionStrategy();
      rms = new RandomMoveStrategy();
      this.moveStrategy = new PrioritisedStrategy([oavs, oaps, rms]);
    }

    Solver.prototype.solve = function(grid) {
      var move, movesToTry, newGrid, solvedNewGrid, _i, _len;
      if (!grid.isValid()) {
        return null;
      }
      if (grid.isFilled()) {
        return grid;
      }
      movesToTry = this.moveStrategy.getCandidateMoves(grid);
      for (_i = 0, _len = movesToTry.length; _i < _len; _i++) {
        move = movesToTry[_i];
        console.log(grid.getEmptyCells().length + ": Trying move from " + move.strategy);
        newGrid = grid.clone();
        newGrid.setCellValue(move.cell, move.symbol);
        solvedNewGrid = this.solve(newGrid);
        if (solvedNewGrid != null) {
          return solvedNewGrid;
        }
      }
      return null;
    };

    return Solver;

  })();

  this.Solver = Solver;

}).call(this);

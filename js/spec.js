// Generated by CoffeeScript 1.7.1
(function() {
  var Grid, OnlyAvailableValueStrategy, OnlyPositionInCollectionStrategy, PrioritisedStrategy, RandomMoveStrategy, Solver;

  Grid = (function() {
    function Grid(data) {
      var boxX, boxY, indicesForThisBox, startX, startY, x, y, _i, _j, _k, _l, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.data = data;
      this.order = 3;
      this.dimension = this.order * this.order;
      this.symbols = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      this.allIndices = [];
      for (x = _i = 0, _ref = this.dimension; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.dimension; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.allIndices.push(this.getCellIndex(x, y));
        }
      }
      this.indexCollections = [];
      for (y = _k = 0, _ref2 = this.dimension; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; y = 0 <= _ref2 ? ++_k : --_k) {
        this.indexCollections.push((function() {
          var _l, _ref3, _results;
          _results = [];
          for (x = _l = 0, _ref3 = this.dimension; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; x = 0 <= _ref3 ? ++_l : --_l) {
            _results.push(this.getCellIndex(x, y));
          }
          return _results;
        }).call(this));
      }
      for (x = _l = 0, _ref3 = this.dimension; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; x = 0 <= _ref3 ? ++_l : --_l) {
        this.indexCollections.push((function() {
          var _m, _ref4, _results;
          _results = [];
          for (y = _m = 0, _ref4 = this.dimension; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; y = 0 <= _ref4 ? ++_m : --_m) {
            _results.push(this.getCellIndex(x, y));
          }
          return _results;
        }).call(this));
      }
      for (boxX = _m = 0, _ref4 = this.order; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; boxX = 0 <= _ref4 ? ++_m : --_m) {
        for (boxY = _n = 0, _ref5 = this.order; 0 <= _ref5 ? _n < _ref5 : _n > _ref5; boxY = 0 <= _ref5 ? ++_n : --_n) {
          indicesForThisBox = [];
          startX = boxX * this.order;
          startY = boxY * this.order;
          for (x = _o = startX, _ref6 = startX + this.order; startX <= _ref6 ? _o < _ref6 : _o > _ref6; x = startX <= _ref6 ? ++_o : --_o) {
            for (y = _p = startY, _ref7 = startY + this.order; startY <= _ref7 ? _p < _ref7 : _p > _ref7; y = startY <= _ref7 ? ++_p : --_p) {
              indicesForThisBox.push(this.getCellIndex(x, y));
            }
          }
          this.indexCollections.push(indicesForThisBox);
        }
      }
    }

    Grid.prototype.isValid = function() {
      var indices, indicesWithSymbol, symbol, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.symbols;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        symbol = _ref[_i];
        _ref1 = this.indexCollections;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          indices = _ref1[_j];
          indicesWithSymbol = this.getIndicesMatchingSymbol(indices, symbol);
          if (indicesWithSymbol.length > 1) {
            return false;
          }
        }
      }
      return true;
    };

    Grid.prototype.isFilled = function() {
      return this.getEmptyCellIndices().length === 0;
    };

    Grid.prototype.getEmptyCellIndices = function() {
      return this.getIndicesMatchingSymbol(this.allIndices, null);
    };

    Grid.prototype.getIndicesMatchingSymbol = function(indices, symbol) {
      var index;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = indices.length; _i < _len; _i++) {
          index = indices[_i];
          if (this.data[index] === symbol) {
            _results.push(index);
          }
        }
        return _results;
      }).call(this);
    };

    Grid.prototype.getCellIndex = function(x, y) {
      return this.dimension * y + x;
    };

    Grid.prototype.clone = function() {
      return new Grid(this.data.slice());
    };

    Grid.prototype.getValidValues = function(x, y) {
      var index;
      index = this.getCellIndex(x, y);
      return this.getValidValuesByIndex(index);
    };

    Grid.prototype.getValidValuesByIndex = function(index) {
      var contains, indices, relevantCollections, symbol, symbolsUsedByCollection, unusedSymbols, usedSymbols;
      if (this.data[index]) {
        return [];
      }
      contains = function(list, item) {
        return list.indexOf(item) >= 0;
      };
      relevantCollections = (function() {
        var _i, _len, _ref, _results;
        _ref = this.indexCollections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          indices = _ref[_i];
          if (contains(indices, index)) {
            _results.push(indices);
          }
        }
        return _results;
      }).call(this);
      symbolsUsedByCollection = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = relevantCollections.length; _i < _len; _i++) {
          indices = relevantCollections[_i];
          _results.push(this.getSymbolsUsed(indices));
        }
        return _results;
      }).call(this);
      usedSymbols = [].concat.apply([], symbolsUsedByCollection);
      unusedSymbols = (function() {
        var _i, _len, _ref, _results;
        _ref = this.symbols;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          symbol = _ref[_i];
          if (!contains(usedSymbols, symbol)) {
            _results.push(symbol);
          }
        }
        return _results;
      }).call(this);
      return unusedSymbols;
    };

    Grid.prototype.getSymbolsUsed = function(indices) {
      var ind, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = indices.length; _i < _len; _i++) {
        ind = indices[_i];
        if (this.data[ind] != null) {
          _results.push(this.data[ind]);
        }
      }
      return _results;
    };

    return Grid;

  })();

  this.Grid = Grid;

  OnlyAvailableValueStrategy = (function() {
    function OnlyAvailableValueStrategy() {}

    OnlyAvailableValueStrategy.prototype.getCandidateMoves = function(grid) {
      var emptyCellIndex, moves, validValues, _i, _len, _ref;
      moves = [];
      _ref = grid.getEmptyCellIndices();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        emptyCellIndex = _ref[_i];
        validValues = grid.getValidValuesByIndex(emptyCellIndex);
        if (validValues.length === 1) {
          moves.push({
            index: emptyCellIndex,
            symbol: validValues[0]
          });
        }
      }
      return moves;
    };

    return OnlyAvailableValueStrategy;

  })();

  OnlyPositionInCollectionStrategy = (function() {
    function OnlyPositionInCollectionStrategy() {}

    OnlyPositionInCollectionStrategy.prototype.getCandidateMoves = function(grid) {
      var collection, index, moves, positions, symbol, symbolPositions, validValue, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      moves = [];
      _ref = grid.indexCollections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        collection = _ref[_i];
        positions = {};
        _ref1 = grid.symbols;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          symbol = _ref1[_j];
          positions[symbol] = [];
        }
        for (_k = 0, _len2 = collection.length; _k < _len2; _k++) {
          index = collection[_k];
          _ref2 = grid.getValidValuesByIndex(index);
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            validValue = _ref2[_l];
            positions[validValue].push(index);
          }
        }
        _ref3 = grid.symbols;
        for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
          symbol = _ref3[_m];
          symbolPositions = positions[symbol];
          if (symbolPositions.length === 1) {
            moves.push({
              index: symbolPositions[0],
              symbol: symbol
            });
          }
        }
      }
      return moves;
    };

    return OnlyPositionInCollectionStrategy;

  })();

  PrioritisedStrategy = (function() {
    function PrioritisedStrategy(strategies) {
      this.strategies = strategies;
    }

    PrioritisedStrategy.prototype.getCandidateMoves = function(grid) {
      var moves, strategy, _i, _len, _ref;
      _ref = this.strategies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        strategy = _ref[_i];
        moves = strategy.getCandidateMoves(grid);
        if ((moves != null) && moves.length > 0) {
          return moves;
        }
      }
      return [];
    };

    return PrioritisedStrategy;

  })();

  RandomMoveStrategy = (function() {
    function RandomMoveStrategy() {}

    RandomMoveStrategy.prototype.getCandidateMoves = function(grid) {
      var emptyCellIndices, indexToSet, symbol, validValues;
      emptyCellIndices = grid.getEmptyCellIndices();
      indexToSet = emptyCellIndices[0];
      validValues = grid.getValidValuesByIndex(indexToSet);
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = validValues.length; _i < _len; _i++) {
          symbol = validValues[_i];
          _results.push({
            index: indexToSet,
            symbol: symbol
          });
        }
        return _results;
      })();
    };

    return RandomMoveStrategy;

  })();

  Solver = (function() {
    function Solver() {
      var oaps, oavs, rms;
      oavs = new OnlyAvailableValueStrategy();
      oaps = new OnlyPositionInCollectionStrategy();
      rms = new RandomMoveStrategy();
      this.moveStrategy = new PrioritisedStrategy([oavs, oaps, rms]);
    }

    Solver.prototype.solve = function(grid) {
      var move, movesToTry, newGrid, solvedNewGrid, _i, _len;
      if (!grid.isValid()) {
        return null;
      }
      if (grid.isFilled()) {
        return grid;
      }
      movesToTry = this.moveStrategy.getCandidateMoves(grid);
      for (_i = 0, _len = movesToTry.length; _i < _len; _i++) {
        move = movesToTry[_i];
        newGrid = grid.clone();
        newGrid.data[move.index] = move.symbol;
        solvedNewGrid = this.solve(newGrid);
        if (solvedNewGrid != null) {
          return solvedNewGrid;
        } else {
          console.log("failed move");
        }
      }
      return null;
    };

    return Solver;

  })();

  this.Solver = Solver;

  describe("Grid", function() {
    it("should exist", function() {
      return expect(Grid).toBeDefined();
    });
    describe("isValid", function() {
      it("should exist", function() {
        var grid;
        grid = new Grid(GridData.completeGrid);
        return expect(grid.isValid).toBeDefined();
      });
      it("should return true for complete grids", function() {
        var grid, result;
        grid = new Grid(GridData.completeGrid);
        result = grid.isValid();
        return expect(result).toEqual(true);
      });
      it("should return false for invalid row grids", function() {
        var grid, result;
        grid = new Grid(GridData.invalidRowGrid);
        result = grid.isValid();
        return expect(result).toEqual(false);
      });
      it("should return false for invalid column grids", function() {
        var grid, result;
        grid = new Grid(GridData.invalidColumnGrid);
        result = grid.isValid();
        return expect(result).toEqual(false);
      });
      return it("should return false for invalid cell grids", function() {
        var grid, result;
        grid = new Grid(GridData.invalidCellGrid);
        result = grid.isValid();
        return expect(result).toEqual(false);
      });
    });
    describe("getEmptyCellIndices", function() {
      it("should exist", function() {
        var grid;
        grid = new Grid(GridData.wellRestrictedCellsGrid);
        return expect(grid.getEmptyCellIndices).toBeDefined();
      });
      it("should return correct count", function() {
        var grid, result;
        grid = new Grid(GridData.wellRestrictedCellsGrid);
        result = grid.getEmptyCellIndices();
        return expect(result.length).toBe(63);
      });
      return it("should return correct count repeatedly", function() {
        var grid, result, results, _i, _len, _results;
        grid = new Grid(GridData.wellRestrictedCellsGrid);
        results = [grid.getEmptyCellIndices(), grid.getEmptyCellIndices(), grid.getEmptyCellIndices()];
        _results = [];
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          result = results[_i];
          _results.push(expect(result.length).toBe(63));
        }
        return _results;
      });
    });
    return describe("getValidValues", function() {
      it("should exist", function() {
        var grid;
        grid = new Grid(GridData.completeGrid);
        return expect(grid.getValidValues).toBeDefined();
      });
      it("should return empty array for filled cell", function() {
        var grid, result;
        grid = new Grid(GridData.completeGrid);
        result = grid.getValidValues(0, 0);
        return expect(result.length).toBe(0);
      });
      it("should return all values for unrestricted cell", function() {
        var grid, result;
        grid = new Grid(GridData.emptyGrid);
        result = grid.getValidValues(3, 4);
        return expect(result.length).toBe(9);
      });
      it("should return missing values for single value cell", function() {
        var grid, result;
        grid = new Grid(GridData.almostCompleteGrid);
        result = grid.getValidValues(8, 8);
        expect(result.length).toBe(1);
        return expect(result[0]).toBe(8);
      });
      return it("should return missing values for restricted cells", function() {
        var grid, result1, result2, result3;
        grid = new Grid(GridData.restrictedSquareGrid);
        result1 = grid.getValidValues(7, 0);
        expect(result1.length).toBe(3);
        result2 = grid.getValidValues(0, 2);
        expect(result2.length).toBe(3);
        result3 = grid.getValidValues(0, 3);
        return expect(result3.length).toBe(7);
      });
    });
  });

  this.GridData = {
    emptyGrid: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    invalidRowGrid: [1, null, null, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    invalidColumnGrid: [1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    invalidCellGrid: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    restrictedSquareGrid: [1, 2, 3, 4, 5, 6, null, null, null, 4, 5, 6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    completeGrid: [1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 9, 1, 2, 3, 7, 8, 9, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 8, 9, 1, 5, 6, 7, 8, 9, 1, 2, 3, 4, 8, 9, 1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 8, 9, 1, 2, 6, 7, 8, 9, 1, 2, 3, 4, 5, 9, 1, 2, 3, 4, 5, 6, 7, 8],
    almostCompleteGrid: [1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 9, 1, 2, 3, 7, 8, 9, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 8, 9, 1, 5, 6, 7, 8, 9, 1, 2, 3, 4, 8, 9, 1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 8, 9, 1, 2, 6, 7, 8, 9, 1, 2, 3, 4, 5, 9, 1, 2, 3, 4, 5, 6, 7, null],
    mainlyCompleteGrid: [1, 2, null, 4, 5, 6, 7, null, 9, 4, 5, 6, 7, null, 9, 1, 2, null, 7, 8, 9, 1, 2, 3, null, 5, 6, 2, null, 4, 5, 6, 7, 8, 9, null, 5, 6, 7, 8, 9, 1, 2, 3, 4, 8, 9, null, 2, 3, null, 5, 6, null, 3, 4, 5, 6, 7, 8, 9, 1, 2, 6, 7, 8, 9, 1, null, 3, 4, null, 9, 1, null, 3, 4, 5, 6, 7, null],
    newspaperGrid: [null, null, null, 4, null, null, 2, 9, null, 4, null, null, null, null, 5, null, 1, null, 5, null, 1, null, 2, null, null, 6, null, null, null, null, null, null, 6, null, null, 3, null, null, null, 5, 4, 8, null, null, null, 8, null, null, 1, null, null, null, null, null, null, 6, null, null, 7, null, 5, null, 9, null, 1, null, 2, null, null, null, null, 8, null, 4, 8, null, null, 3, null, null, null],
    wellRestrictedCellsGrid: [1, 2, 3, 4, 5, 6, 7, 8, null, 4, 5, 6, null, null, null, null, null, null, 7, 8, null, null, null, null, null, null, null, 2, null, null, null, null, null, null, null, null, 3, null, null, null, null, null, null, null, null, 5, null, null, null, null, null, null, null, null, 6, null, null, null, null, null, null, null, null, 8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    onePositionInCollectionGrid: [1, 2, 3, 4, 5, 6, null, null, null, 4, 5, 6, null, null, null, null, null, null, 7, 8, 9, null, null, null, null, null, null, null, null, null, null, null, null, 9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
  };

  describe("OnlyAvailableValueStrategy", function() {
    it("should exist", function() {
      return expect(OnlyAvailableValueStrategy).toBeDefined();
    });
    return describe("getCandidateMoves", function() {
      var strategy;
      strategy = new OnlyAvailableValueStrategy();
      it("should exist", function() {
        return expect(strategy.getCandidateMoves).toBeDefined();
      });
      return it("should find squares that can only have one number in", function() {
        var gridWithHoles, move, moves, movesFor21, movesFor72, movesFor8;
        gridWithHoles = new Grid(GridData.wellRestrictedCellsGrid);
        moves = strategy.getCandidateMoves(gridWithHoles);
        expect(moves.length).toBe(3);
        movesFor8 = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = moves.length; _i < _len; _i++) {
            move = moves[_i];
            if (move.index === 8) {
              _results.push(move);
            }
          }
          return _results;
        })();
        movesFor21 = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = moves.length; _i < _len; _i++) {
            move = moves[_i];
            if (move.index === 8) {
              _results.push(move);
            }
          }
          return _results;
        })();
        movesFor72 = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = moves.length; _i < _len; _i++) {
            move = moves[_i];
            if (move.index === 8) {
              _results.push(move);
            }
          }
          return _results;
        })();
        expect(movesFor8.length).toBe(1);
        expect(movesFor8[0].symbol).toBe(9);
        expect(movesFor21.length).toBe(1);
        expect(movesFor21[0].symbol).toBe(9);
        expect(movesFor72.length).toBe(1);
        return expect(movesFor72[0].symbol).toBe(9);
      });
    });
  });

  describe("OnlyPositionInCollectionStrategy", function() {
    it("should exist", function() {
      return expect(OnlyPositionInCollectionStrategy).toBeDefined();
    });
    return describe("getCandidateMoves", function() {
      var strategy;
      strategy = new OnlyPositionInCollectionStrategy();
      it("should exist", function() {
        return expect(strategy.getCandidateMoves).toBeDefined();
      });
      return it("should find squares are the only position in collection", function() {
        var gridWithHoles, moves;
        gridWithHoles = new Grid(GridData.onePositionInCollectionGrid);
        moves = strategy.getCandidateMoves(gridWithHoles);
        expect(moves.length).toBe(1);
        expect(moves[0].index).toBe(8);
        return expect(moves[0].symbol).toBe(9);
      });
    });
  });

  describe("RandomMoveStrategy", function() {
    it("should exist", function() {
      return expect(RandomMoveStrategy).toBeDefined();
    });
    return describe("getCandidateMoves", function() {
      var strategy;
      strategy = new RandomMoveStrategy();
      it("should exist", function() {
        return expect(strategy.getCandidateMoves).toBeDefined();
      });
      return it("should only suggest valid moves", function() {
        var grid, moves;
        grid = new Grid(GridData.almostCompleteGrid);
        moves = strategy.getCandidateMoves(grid);
        expect(moves.length).toBe(1);
        expect(moves[0].index).toBe(80);
        return expect(moves[0].symbol).toBe(8);
      });
    });
  });

  describe("Solver", function() {
    it("should exist", function() {
      return expect(Solver).toBeDefined();
    });
    return describe("solve", function() {
      var solver;
      solver = new Solver();
      it("should exist", function() {
        return expect(solver.solve).toBeDefined();
      });
      it("should return completed grids", function() {
        var result;
        result = solver.solve(new Grid(GridData.completeGrid));
        return expect(result.data).toEqual(GridData.completeGrid);
      });
      it("should return null for invalid grids", function() {
        var result;
        result = solver.solve(new Grid(GridData.invalidRowGrid));
        return expect(result).toBeNull();
      });
      it("should solve final missing cell", function() {
        var result;
        result = solver.solve(new Grid(GridData.almostCompleteGrid));
        return expect(result.data).toEqual(GridData.completeGrid);
      });
      it("should solve mainly complete grid", function() {
        var result;
        result = solver.solve(new Grid(GridData.mainlyCompleteGrid));
        return expect(result.data).toEqual(GridData.completeGrid);
      });
      return it("should solve newspaper grid", function() {
        var result;
        result = solver.solve(new Grid(GridData.newspaperGrid));
        return expect(result.data).not.toBeNull();
      });
    });
  });

}).call(this);
